---

- name: Check if cluster operators and nodes are healthy
  include_role:
    name: check-cluster-health

- name: Check if the deployment file exists
  stat:
    path: "{{ file_dest }}/sample-web-app.yaml"
  register: file_status

- name: Delete the deployment file if file exists
  file:
    path: "{{ file_dest }}/sample-web-app.yaml"
    state: absent
  when: file_status.stat.exists

- name: Check if the service file exists
  stat:
    path: "{{ file_dest }}/test-svc.yaml"
  register: file_status

- name: Delete service file if file exists
  file:
    path: "{{ file_dest }}/test-svc.yaml"
    state: absent
  when: file_status.stat.exists

- name: Delete the service if already exist
  shell: oc delete -f "{{ role_path }}/files/test-svc.yaml"
  ignore_errors: true  

- name: Delete the sample-app if already exist
  shell: oc delete -f "{{ role_path }}/files/sample-web-app.yaml"
  ignore_errors: true

- name: "Copy sample-app file"
  copy:
    src: "{{ role_path }}/files/sample-web-app.yaml"
    dest: "{{ file_dest }}"

- name: "Copy sample-app file"
  copy:
    src: "{{ role_path }}/files/test-svc.yaml"
    dest: "{{ file_dest }}"

- name: "Create namespace to deploy sample-web-app"
  shell: oc create ns "{{ test_namespace }}" -o yaml | oc label -f - security.openshift.io/scc.podSecurityLabelSync=false pod-security.kubernetes.io/enforce=privileged pod-security.kubernetes.io/audit=privileged pod-security.kubernetes.io/warn=privileged --overwrite
  register: create_ns

- debug:
    msg: "{{ create_ns.stdout_lines }}"

- name: "Run sample-web-app file"
  shell: oc create -f "{{ file_dest }}/sample-web-app.yaml"
  register: create_pod

- name: "Wait for sample-app to come up"
  wait_for:
    timeout: 120
    delay: 2

- name: "Check for the pods"
  shell: oc get pods -n "{{ test_namespace }}"
  register: check_pod

- name: Check if the pods are in Running state
  shell: oc get pods -n "{{ test_namespace }}" -o jsonpath='{.items[0].status.phase}'
  register: pods_status
  until: pods_status.stdout == "Running"
  retries: 15
  delay: 60

- debug:
    msg: "{{ check_pod.stdout_lines }}"

- name: "Run the service file"
  shell: oc create -f "{{ file_dest }}/test-svc.yaml"
  register: create_service
  when: pods_status.stdout == "Running"

- name: "Wait for service to come up"
  wait_for:
    timeout: 120
    delay: 2

- name: "Check the service"
  shell: oc get service -A | grep test-svc
  register: check_service

- debug:
    msg: "{{ check_service.stdout_lines }}"

- name: "Get the pod"
  shell: oc get pods -n "{{ test_namespace }}" -o=jsonpath='{.items[0].metadata.name}'
  register: first_pod

- name: "Check the logs of the service"
  shell: oc logs "{{ first_pod.stdout }}" -n '{{ test_namespace }}'
  register: service_logs

- debug:
    msg: "{{ service_logs.stdout_lines }}"

- name: "Get the externalIP of the service"
  shell: oc get service -n "{{ test_namespace }}" -o=jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}'
  register: lb_externalip

- name: "Wait for loadbalancer to comes up"
  wait_for:
    delay: 5

- name: "Check the application is accessible through an external IP"
  shell: curl http://{{ lb_externalip.stdout }}
  register: curl_ip
  when: lb_externalip.stdout != ''

- debug:
    msg: "{{ curl_ip.stdout_lines }}" 

- name: Verify the logs from the external ip
  shell: echo "Successfully validate the service controller function"
  when: curl_ip.stdout == "My Go App"
  register: success_msg

- debug:
    msg: "{{ success_msg.stdout_lines }}"

- name: Clean up the service 
  shell: oc delete -f "{{ role_path }}/files/test-svc.yaml"
  ignore_errors: true
  register: cleanup_srv

- debug:
    msg: "{{ cleanup_srv.stdout_lines }}"

- name: Check if  the service has been deleted
  shell: oc get service -A --no-headers | grep test-svc | wc -l
  register: func_srv
  until: func_srv.stdout|int == 0
  retries: 15
  delay: 60

- name: Clean up the sample-app resources
  shell: oc delete -f "{{ role_path }}/files/sample-web-app.yaml"
  ignore_errors: true
  register: cleanup_dly

- debug:
    msg: "{{ cleanup_dly.stdout_lines }}"

- name: Check if all the pods has been deleted
  shell: oc get pods -n "{{ test_namespace }}" --no-headers | wc -l
  register: del_pod
  until: del_pod.stdout|int == 0
  retries: 15
  delay: 60

- name: "Delete namespace created for sample-web-app"
  shell: oc delete ns "{{ test_namespace }}"
  register: delete_ns

- name: Check if the namespace gets deleted
  shell: oc get namespace --no-headers | grep "{{ test_namespace }}" | wc -l
  register: srv_namespace
  until: srv_namespace.stdout|int == 0
  retries: 15
  delay: 30
